variable "benchmark_name" {
  type    = string
  default = "CIS_Microsoft_Windows_Server_2019_Benchmark_v1.1.0-xccdf"
}

variable "build_resource_group_name" {
  type    = string
  default = ""
}

variable "client_id" {
  type    = string
  default = "${var.ARM_CLIENT_ID}"
}

variable "client_secret" {
  type    = string
  default = "${var.ARM_CLIENT_SECRET}"
}

variable "destination_gallery_name" {
  type    = string
  default = "sig001"
}

variable "destination_image_name" {
  type    = string
  default = "image"
}

variable "destination_image_version" {
  type    = string
  default = "version"
}

variable "destination_replication_region" {
  type    = string
  default = "northeurope"
}

variable "destination_resource_group_location" {
  type    = string
  default = "northeurope"
}

variable "destination_resource_group_name" {
  type    = string
  default = "sharedImageGallery"
}

variable "helper_script_folder" {
  type    = string
  default = "c:/buildartifacts"
}

variable "reports_storage_account_url" {
  type    = string
  default = "https://someblob.blob.core.windows.net/reports"
}

variable "shared_image_gallery_gallery_name" {
  type    = string
  default = ""
}

variable "shared_image_gallery_image_name" {
  type    = string
  default = ""
}

variable "shared_image_gallery_image_version" {
  type    = string
  default = ""
}

variable "shared_image_gallery_resource_group" {
  type    = string
  default = ""
}

variable "storage_account_url" {
  type    = string
  default = "https://someblob.blob.core.windows.net/tools"
}

variable "subscription_id" {
  type    = string
  default = "${var.ARM_SUBSCRIPTION_ID}"
}

variable "tenant_id" {
  type    = string
  default = "${var.ARM_TENANT_ID}"
}

variable "vm_size" {
  type    = string
  default = "Standard_D2_v2"
}

# "timestamp" template function replacement
locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors onto a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/from-1.5/blocks/source
source "azure-arm" "autogenerated_1" {
  build_resource_group_name         = "${var.build_resource_group_name}"
  client_id                         = "${var.client_id}"
  client_secret                     = "${var.client_secret}"
  communicator                      = "winrm"
  managed_image_name                = "${var.destination_image_name}"
  managed_image_resource_group_name = "${var.destination_resource_group_name}"
  os_type                           = "Windows"
  shared_image_gallery = {
    gallery_name   = "${var.shared_image_gallery_gallery_name}"
    image_name     = "${var.shared_image_gallery_image_name}"
    image_version  = "${var.shared_image_gallery_image_version}"
    resource_group = "${var.shared_image_gallery_resource_group}"
    subscription   = "${var.subscription_id}"
  }
  shared_image_gallery_destination {
    gallery_name        = "${var.destination_gallery_name}"
    image_name          = "${var.destination_image_name}"
    image_version       = "${var.destination_image_version}"
    replication_regions = ["${var.destination_replication_region}"]
    resource_group      = "${var.destination_resource_group_name}"
  }
  subscription_id = "${var.subscription_id}"
  tenant_id       = "${var.tenant_id}"
  vm_size         = "${var.vm_size}"
  winrm_insecure  = "true"
  winrm_timeout   = "3m"
  winrm_use_ssl   = "true"
  winrm_username  = "packer"
}

# a build block invokes sources and runs provisionning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/from-1.5/blocks/build
build {
  sources = ["source.azure-arm.autogenerated_1"]


  #could not parse template for following block: "template: generated:3: function \"template_dir\" not defined"
  provisioner "file" {
    destination = "{{user `helper_script_folder`}}"
    source      = "{{ template_dir }}/config/"
  }
  provisioner "powershell" {
    inline = ["Set-ExecutionPolicy Bypass -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"]
  }
  provisioner "powershell" {
    inline = ["choco install -y javaruntime", "choco install -y azcopy10"]
  }
  provisioner "powershell" {
    inline = ["java -version"]
  }
  provisioner "powershell" {
    inline = ["# Below will download and run the assessor cli", "$env:Path += \";C:\\ProgramData\\chocolatey\\lib\\azcopy10\\tools\\\"", "$env:AZCOPY_CRED_TYPE = \"Anonymous\"", "$env:AZCOPY_USER_AGENT_PREFIX = \"Microsoft Azure Storage Explorer, 1.12.0, win32, \"", "azcopy copy \"${var.storage_account_url}\" ${var.helper_script_folder} --recursive --from-to=BlobLocal --check-md5 \"FailIfDifferent\"", "ls ${var.helper_script_folder}"]
  }
  provisioner "powershell" {
    inline = ["write-host 'Run the install and configure script'", "${var.helper_script_folder}/init.ps1", "write-host 'Perform tests'", "cd ${var.helper_script_folder}\\Assessor-CLI-v4.0.21\\Assessor-CLI; .\\Assessor-CLI.bat -b .\\benchmarks\\${var.benchmark_name}.xml -p \"Level 2 - Member Server\"", "write-host 'push report to blob storage'", "(ls .\\reports)[0] | Rename-Item -NewName \"L2${var.destination_image_version}\" -Verbose", "$report = (Get-Item .\\reports\\L2${var.destination_image_version} | Select FullName).FullName", "azcopy copy $report \"${var.reports_storage_account_url}\" --overwrite=prompt --follow-symlinks --from-to=LocalBlob --blob-type=Detect --put-md5;", "write-host 'Cleanup of the helper script folder'", "Start-Sleep -Seconds 30", "rm ${var.helper_script_folder}\\Extract -Recurse -Force", "write-host 'Cleanup of the installed packages'", "choco uninstall -y javaruntime", "choco uninstall -y azcopy10", "write-host 'sysprep the machine'", "if( Test-Path $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml ){ rm $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml -Force}", "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit /mode:vm", "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"]
  }
}
